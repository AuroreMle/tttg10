{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: \"AdminDashboard\",\n  data() {\n    return {\n      code: '',\n      // Code saisi par l'utilisateur\n      history: [],\n      // Historique des gains\n      alertMessage: '',\n      // Message d'alerte\n      alertClass: '' // Classe CSS pour l'alerte\n    };\n  },\n  methods: {\n    async validateCode() {\n      try {\n        const response = await axios.post('http://localhost:3000/validate-code', {\n          code: this.code\n        });\n        if (response.status === 200 && response.data.message === 'Code valide !') {\n          this.alertMessage = 'Code valide !';\n          this.alertClass = 'alert-success';\n\n          // Ajouter l'entrée à l'historique\n          const newEntry = {\n            date: new Date().toLocaleDateString(),\n            // Format de la date\n            code: this.code,\n            gain: response.data.gain,\n            expiryDate: new Date(new Date().setDate(new Date().getDate() + 30)).toLocaleDateString(),\n            // Format de la date\n            username: localStorage.getItem('username') || 'N/A',\n            // Ajoutez le username lors de la validation du code\n            status: 'À remettre',\n            // État par défaut\n            statusDate: '' // Date du statut par défaut\n          };\n          this.history.push(newEntry);\n        } else {\n          this.alertMessage = 'Code invalide.';\n          this.alertClass = 'alert-error';\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          this.alertMessage = 'Code invalide.';\n        } else {\n          console.error('Erreur lors de la validation du code: ', error);\n          this.alertMessage = 'Erreur lors de la validation du code.';\n        }\n        this.alertClass = 'alert-error';\n      }\n    },\n    async fetchHistory() {\n      try {\n        const response = await axios.get('http://localhost:3000/admin-history');\n        this.history = response.data.map(entry => ({\n          date: new Date(entry.date).toLocaleDateString(),\n          // Format de la date\n          code: entry.code,\n          gain: entry.gain,\n          expiryDate: new Date(entry.expiryDate).toLocaleDateString(),\n          // Format de la date\n          username: entry.username || 'N/A',\n          // Assurez-vous que le nom d'utilisateur est inclus\n          status: entry.status || 'À remettre',\n          // Assurez-vous que le statut est inclus\n          statusDate: entry.statusDate ? new Date(entry.statusDate).toLocaleDateString() : '' // Format de la date du statut\n        }));\n      } catch (error) {\n        console.error('Erreur lors de la récupération de l\\'historique: ', error);\n      }\n    },\n    async updateStatus(id) {\n      try {\n        const response = await axios.patch(`http://localhost:3000/update-status/${id}`);\n        if (response.status === 200) {\n          // Mettre à jour l'entrée dans l'historique\n          const updatedHistory = this.history.map(entry => {\n            if (entry.id === id) {\n              entry.status = `Remis le ${new Date().toLocaleDateString()}`;\n              entry.statusDate = new Date().toLocaleDateString();\n            }\n            return entry;\n          });\n          this.history = updatedHistory;\n        }\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour du statut: ', error);\n      }\n    }\n  },\n  created() {\n    this.fetchHistory();\n  }\n};","map":{"version":3,"names":["axios","name","data","code","history","alertMessage","alertClass","methods","validateCode","response","post","status","message","newEntry","date","Date","toLocaleDateString","gain","expiryDate","setDate","getDate","username","localStorage","getItem","statusDate","push","error","console","fetchHistory","get","map","entry","updateStatus","id","patch","updatedHistory","created"],"sources":["/Users/auroremalie/ttpjc/src/views/AdminDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"admin-dashboard\">\n    <!-- Section 1 -->\n    <section class=\"section-greeting\">\n      <h1>Partageons notre positivi-thé !</h1>\n      <form class=\"code-form\" @submit.prevent=\"validateCode\">\n        <input type=\"text\" v-model=\"code\" placeholder=\"Entrer le code concours\" />\n        <button type=\"submit\">Valider</button>\n      </form>\n      <p v-if=\"alertMessage\" :class=\"alertClass\">{{ alertMessage }}</p>\n    </section>\n\n    <!-- Section 2 -->\n    <section class=\"section-history\">\n      <h2>Historique des gains</h2>\n      <table class=\"history-table\">\n        <thead>\n          <tr>\n            <th>Date de validation</th>\n            <th>Code concours</th>\n            <th>Gain</th>\n            <th>A retirer le plus tard</th>\n            <th>Nom de l'utilisateur</th>\n            <th>Statut</th> <!-- Nouvelle colonne pour le statut -->\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(entry, index) in history\" :key=\"index\">\n            <td>{{ entry.date }}</td>\n            <td>{{ entry.code }}</td>\n            <td>{{ entry.gain }}</td>\n            <td>{{ entry.expiryDate }}</td>\n            <td>{{ entry.username }}</td>\n            <td>\n              <button v-if=\"entry.status === 'À remettre'\" @click=\"updateStatus(entry.id)\">\n                À remettre\n              </button>\n              <span v-else>\n                Remis le {{ entry.statusDate }}\n              </span>\n            </td> <!-- Affichage du statut -->\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: \"AdminDashboard\",\n  data() {\n    return {\n      code: '', // Code saisi par l'utilisateur\n      history: [], // Historique des gains\n      alertMessage: '', // Message d'alerte\n      alertClass: '' // Classe CSS pour l'alerte\n    };\n  },\n  methods: {\n    async validateCode() {\n      try {\n        const response = await axios.post('http://localhost:3000/validate-code', { code: this.code });\n        if (response.status === 200 && response.data.message === 'Code valide !') {\n          this.alertMessage = 'Code valide !';\n          this.alertClass = 'alert-success';\n\n          // Ajouter l'entrée à l'historique\n          const newEntry = {\n            date: new Date().toLocaleDateString(), // Format de la date\n            code: this.code,\n            gain: response.data.gain,\n            expiryDate: new Date(new Date().setDate(new Date().getDate() + 30)).toLocaleDateString(), // Format de la date\n            username: localStorage.getItem('username') || 'N/A', // Ajoutez le username lors de la validation du code\n            status: 'À remettre', // État par défaut\n            statusDate: '' // Date du statut par défaut\n          };\n          this.history.push(newEntry);\n        } else {\n          this.alertMessage = 'Code invalide.';\n          this.alertClass = 'alert-error';\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          this.alertMessage = 'Code invalide.';\n        } else {\n          console.error('Erreur lors de la validation du code: ', error);\n          this.alertMessage = 'Erreur lors de la validation du code.';\n        }\n        this.alertClass = 'alert-error';\n      }\n    },\n    async fetchHistory() {\n      try {\n        const response = await axios.get('http://localhost:3000/admin-history');\n        this.history = response.data.map(entry => ({\n          date: new Date(entry.date).toLocaleDateString(), // Format de la date\n          code: entry.code,\n          gain: entry.gain,\n          expiryDate: new Date(entry.expiryDate).toLocaleDateString(), // Format de la date\n          username: entry.username || 'N/A', // Assurez-vous que le nom d'utilisateur est inclus\n          status: entry.status || 'À remettre', // Assurez-vous que le statut est inclus\n          statusDate: entry.statusDate ? new Date(entry.statusDate).toLocaleDateString() : '' // Format de la date du statut\n        }));\n      } catch (error) {\n        console.error('Erreur lors de la récupération de l\\'historique: ', error);\n      }\n    },\n    async updateStatus(id) {\n      try {\n        const response = await axios.patch(`http://localhost:3000/update-status/${id}`);\n        if (response.status === 200) {\n          // Mettre à jour l'entrée dans l'historique\n          const updatedHistory = this.history.map(entry => {\n            if (entry.id === id) {\n              entry.status = `Remis le ${new Date().toLocaleDateString()}`;\n              entry.statusDate = new Date().toLocaleDateString();\n            }\n            return entry;\n          });\n          this.history = updatedHistory;\n        }\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour du statut: ', error);\n      }\n    }\n  },\n  created() {\n    this.fetchHistory();\n  }\n};\n</script>\n\n\n\n<style scoped>\n/* Styles pour les alertes */\n.alert-success {\n  color: green;\n}\n\n.alert-error {\n  color: red;\n}\n\n.admin-dashboard {\n  padding: 20px;\n}\n\n.section-greeting {\n  margin-bottom: 40px;\n}\n\n.section-greeting h1 {\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: left; /* Alignement à gauche */\n}\n\n.code-form {\n  display: flex;\n  align-items: center;\n}\n\n.code-form input {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin-right: 20px; /* Espace entre l'input et le bouton */\n}\n\n.code-form button {\n  padding: 10px 30px; /* Augmenter la largeur du bouton */\n  background-color: #678d72; /* Nouvelle couleur de fond */\n  color: white;\n  border: none;\n  border-radius: 5px; /* Bordure arrondie du bouton */\n  cursor: pointer;\n}\n\n.section-history {\n  margin-top: 40px;\n}\n\n.section-history h2 {\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: left; /* Alignement à gauche */\n}\n\n.history-table-wrapper {\n  overflow: hidden; /* Assure que les bordures arrondies ne débordent pas */\n}\n\n.history-table {\n  width: 100%;\n  border-collapse: separate; /* Permet de voir l'espace entre les lignes */\n  border-spacing: 0 10px; /* Espace entre les lignes pour voir la background color */\n  background-color: #f3ede0;\n  border: 2px solid #000; /* Bordure extérieure */\n  border-radius: 15px; /* Bordure arrondie pour l'ensemble du tableau */\n  padding: 10px; /* Padding pour éviter que les lignes touchent les bords */\n  box-sizing: border-box; /* S'assure que le padding est inclus dans la largeur */\n}\n\n.history-table th {\n  padding: 15px;\n  text-align: left;\n  color: black;\n  background-color: #f3ede0; /* Même couleur que le fond de la table */\n}\n\n.history-table td {\n  padding: 15px;\n  text-align: left;\n  background-color: #a3bfab; /* Couleur des lignes */\n  color: white;\n  border: none; /* Supprimer la bordure entre les cellules */\n}\n\n/* Bordure arrondie pour chaque ligne */\n.history-table tr {\n  border-radius: 50px;\n  overflow: hidden; /* Assure que les coins arrondis sont visibles */\n}\n\n.history-table tr:not(:last-child) {\n  margin-bottom: 10px; /* Espace entre les lignes */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}