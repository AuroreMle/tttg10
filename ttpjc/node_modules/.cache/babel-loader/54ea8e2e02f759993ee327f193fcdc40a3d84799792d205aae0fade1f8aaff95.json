{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"AdminDashboard\",\n  data() {\n    return {\n      code: '',\n      // Code saisi par l'utilisateur\n      history: [],\n      // Historique des gains\n      alertMessage: '',\n      // Message d'alerte à afficher\n      alertClass: '' // Classe CSS pour le message d'alerte\n    };\n  },\n  methods: {\n    verifyCode() {\n      // Chercher toutes les entrées avec le code saisi\n      const matchingEntries = this.history.filter(entry => entry.code === this.code);\n      if (matchingEntries.length > 0) {\n        // Trier par date de validation pour prendre le plus ancien\n        matchingEntries.sort((a, b) => new Date(a.date) - new Date(b.date));\n        const firstEntry = matchingEntries[0];\n\n        // Afficher le message de validation\n        this.alertMessage = `Ce code offre un ${firstEntry.gain}, il a été validé par ${firstEntry.username} le ${firstEntry.date}. Valable jusqu'au ${firstEntry.expiryDate}.`;\n        this.alertClass = 'alert-success';\n      } else {\n        // Si le code n'existe pas dans l'historique\n        this.alertMessage = \"Ce code n'a pas encore été validé.\";\n        this.alertClass = 'alert-error';\n      }\n    },\n    async fetchHistory() {\n      try {\n        // Récupération de l'historique des gains\n        const response = await axios.get('http://localhost:3000/admin-history');\n        this.history = response.data.map(entry => ({\n          id: entry.id,\n          date: new Date(entry.date).toLocaleDateString(),\n          code: entry.code,\n          gain: entry.gain,\n          expiryDate: new Date(entry.expiryDate).toLocaleDateString(),\n          username: entry.username || 'N/A',\n          status: entry.status || 'À remettre',\n          statusDate: entry.statusDate || ''\n        }));\n      } catch (error) {\n        console.error('Erreur lors de la récupération de l\\'historique: ', error);\n      }\n    },\n    async updateStatus(id) {\n      try {\n        const response = await axios.patch(`http://localhost:3000/update-status/${id}`);\n        if (response.status === 200) {\n          const updatedHistory = this.history.map(entry => {\n            if (entry.id === id) {\n              entry.status = 'Remis le';\n              entry.statusDate = new Date().toLocaleDateString();\n            }\n            return entry;\n          });\n          this.history = updatedHistory;\n        }\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour du statut: ', error);\n      }\n    }\n  },\n  created() {\n    this.fetchHistory();\n  }\n};","map":{"version":3,"names":["axios","name","data","code","history","alertMessage","alertClass","methods","verifyCode","matchingEntries","filter","entry","length","sort","a","b","Date","date","firstEntry","gain","username","expiryDate","fetchHistory","response","get","map","id","toLocaleDateString","status","statusDate","error","console","updateStatus","patch","updatedHistory","created"],"sources":["/Users/auroremalie/ttpjc/src/views/APropos.vue"],"sourcesContent":["<template>\n  <div class=\"admin-dashboard\">\n    <!-- Section 1 -->\n    <section class=\"section-greeting\">\n      <h1>Partageons notre positivi-thé !</h1>\n      <form class=\"code-form\" @submit.prevent=\"verifyCode\">\n        <input type=\"text\" v-model=\"code\" placeholder=\"Entrer le code concours\" />\n        <button type=\"submit\">Vérifier</button>\n      </form>\n      <p v-if=\"alertMessage\" :class=\"alertClass\">{{ alertMessage }}</p>\n    </section>\n\n    <!-- Section 2 -->\n    <section class=\"section-history\">\n      <h2>Historique des gains</h2>\n      <div class=\"history-table-wrapper\">\n        <table class=\"history-table\">\n          <thead>\n            <tr>\n              <th>Date de validation</th>\n              <th>Code concours</th>\n              <th>Gain</th>\n              <th>A retirer le plus tard</th>\n              <th>Nom de l'utilisateur</th>\n              <th>Statut</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(entry, index) in history\" :key=\"index\">\n              <td>{{ entry.date }}</td>\n              <td>{{ entry.code }}</td>\n              <td>{{ entry.gain }}</td>\n              <td>{{ entry.expiryDate }}</td>\n              <td>{{ entry.username }}</td>\n              <td>\n                <button v-if=\"entry.status === 'À remettre'\" @click=\"updateStatus(entry.id)\">\n                  À remettre\n                </button>\n                <span v-else>\n                  Remis le {{ entry.statusDate }}\n                </span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </section>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: \"AdminDashboard\",\n  data() {\n    return {\n      code: '', // Code saisi par l'utilisateur\n      history: [], // Historique des gains\n      alertMessage: '', // Message d'alerte à afficher\n      alertClass: '' // Classe CSS pour le message d'alerte\n    };\n  },\n  methods: {\n    verifyCode() {\n      // Chercher toutes les entrées avec le code saisi\n      const matchingEntries = this.history.filter(entry => entry.code === this.code);\n      \n      if (matchingEntries.length > 0) {\n        // Trier par date de validation pour prendre le plus ancien\n        matchingEntries.sort((a, b) => new Date(a.date) - new Date(b.date));\n        const firstEntry = matchingEntries[0];\n\n        // Afficher le message de validation\n        this.alertMessage = `Ce code offre un ${firstEntry.gain}, il a été validé par ${firstEntry.username} le ${firstEntry.date}. Valable jusqu'au ${firstEntry.expiryDate}.`;\n        this.alertClass = 'alert-success';\n      } else {\n        // Si le code n'existe pas dans l'historique\n        this.alertMessage = \"Ce code n'a pas encore été validé.\";\n        this.alertClass = 'alert-error';\n      }\n    },\n    async fetchHistory() {\n      try {\n        // Récupération de l'historique des gains\n        const response = await axios.get('http://localhost:3000/admin-history');\n        this.history = response.data.map(entry => ({\n          id: entry.id,\n          date: new Date(entry.date).toLocaleDateString(),\n          code: entry.code,\n          gain: entry.gain,\n          expiryDate: new Date(entry.expiryDate).toLocaleDateString(),\n          username: entry.username || 'N/A',\n          status: entry.status || 'À remettre',\n          statusDate: entry.statusDate || ''\n        }));\n      } catch (error) {\n        console.error('Erreur lors de la récupération de l\\'historique: ', error);\n      }\n    },\n    async updateStatus(id) {\n      try {\n        const response = await axios.patch(`http://localhost:3000/update-status/${id}`);\n        if (response.status === 200) {\n          const updatedHistory = this.history.map(entry => {\n            if (entry.id === id) {\n              entry.status = 'Remis le';\n              entry.statusDate = new Date().toLocaleDateString();\n            }\n            return entry;\n          });\n          this.history = updatedHistory;\n        }\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour du statut: ', error);\n      }\n    }\n  },\n  created() {\n    this.fetchHistory();\n  }\n};\n</script>\n\n<style scoped>\n/* Styles pour les alertes */\n.alert-success {\n  color: green;\n}\n\n.alert-error {\n  color: red;\n}\n\n.admin-dashboard {\n  padding: 20px;\n}\n\n.section-greeting {\n  margin-bottom: 40px;\n}\n\n.section-greeting h1 {\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: left;\n}\n\n.code-form {\n  display: flex;\n  align-items: center;\n}\n\n.code-form input {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin-right: 20px;\n}\n\n.code-form button {\n  padding: 10px 30px;\n  background-color: #678d72;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.section-history {\n  margin-top: 40px;\n}\n\n.section-history h2 {\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: left;\n}\n\n.history-table-wrapper {\n  overflow-x: auto;\n}\n\n.history-table {\n  width: 100%;\n  border-collapse: separate;\n  border-spacing: 0 10px;\n  background-color: #f3ede0;\n  border: 2px solid #000;\n  border-radius: 15px;\n  padding: 10px;\n  box-sizing: border-box;\n}\n\n.history-table th {\n  padding: 15px;\n  text-align: left;\n  color: black;\n  background-color: #f3ede0;\n}\n\n.history-table td {\n  padding: 15px;\n  text-align: left;\n  background-color: #a3bfab;\n  color: white;\n  border: none;\n}\n\n.history-table tr {\n  border-radius: 50px;\n  overflow: hidden;\n}\n\n.history-table tr:not(:last-child) {\n  margin-bottom: 10px;\n}\n\n/* Responsive Styles */\n@media (max-width: 768px) {\n  .history-table-wrapper {\n    overflow-x: auto;\n  }\n\n  .history-table {\n    border-spacing: 0;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}