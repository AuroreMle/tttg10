{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3808d382\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"admin-dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"section-greeting\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Partageons notre positivi-thé !\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Valider\", -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"section-history\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Historique des gains\", -1 /* HOISTED */));\nconst _hoisted_7 = {\n  class: \"history-table\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Date de validation\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Code concours\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Gain\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"A retirer le plus tard\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Nom de l'utilisateur\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Statut\"), /*#__PURE__*/_createCommentVNode(\" Nouvelle colonne pour le statut \")])], -1 /* HOISTED */));\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Section 1 \"), _createElementVNode(\"section\", _hoisted_2, [_hoisted_3, _createElementVNode(\"form\", {\n    class: \"code-form\",\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.validateCode && $options.validateCode(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.code = $event),\n    placeholder: \"Entrer le code concours\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.code]]), _hoisted_4], 32 /* NEED_HYDRATION */), $data.alertMessage ? (_openBlock(), _createElementBlock(\"p\", {\n    key: 0,\n    class: _normalizeClass($data.alertClass)\n  }, _toDisplayString($data.alertMessage), 3 /* TEXT, CLASS */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Section 2 \"), _createElementVNode(\"section\", _hoisted_5, [_hoisted_6, _createElementVNode(\"table\", _hoisted_7, [_hoisted_8, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.history, (entry, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(entry.date), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(entry.code), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(entry.gain), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(entry.expiryDate), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(entry.username), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createCommentVNode(\" Afficher le bouton ou le texte en fonction du statut \"), entry.status === 'À remettre' ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: $event => $options.updateStatus(entry.id)\n    }, \" À remettre \", 8 /* PROPS */, _hoisted_9)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_10, \" Remis le \" + _toDisplayString(entry.statusDate), 1 /* TEXT */))])]);\n  }), 128 /* KEYED_FRAGMENT */))])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","type","_createCommentVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","onSubmit","_cache","_withModifiers","args","$options","validateCode","$event","$data","code","placeholder","_hoisted_4","alertMessage","_normalizeClass","alertClass","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_Fragment","_renderList","history","entry","index","_toDisplayString","date","gain","expiryDate","username","status","onClick","updateStatus","id","_hoisted_9","_hoisted_10","statusDate"],"sources":["/Users/auroremalie/ttpjc/src/views/AdminDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"admin-dashboard\">\n    <!-- Section 1 -->\n    <section class=\"section-greeting\">\n      <h1>Partageons notre positivi-thé !</h1>\n      <form class=\"code-form\" @submit.prevent=\"validateCode\">\n        <input type=\"text\" v-model=\"code\" placeholder=\"Entrer le code concours\" />\n        <button type=\"submit\">Valider</button>\n      </form>\n      <p v-if=\"alertMessage\" :class=\"alertClass\">{{ alertMessage }}</p>\n    </section>\n\n    <!-- Section 2 -->\n    <section class=\"section-history\">\n      <h2>Historique des gains</h2>\n      <table class=\"history-table\">\n        <thead>\n          <tr>\n            <th>Date de validation</th>\n            <th>Code concours</th>\n            <th>Gain</th>\n            <th>A retirer le plus tard</th>\n            <th>Nom de l'utilisateur</th>\n            <th>Statut</th> <!-- Nouvelle colonne pour le statut -->\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(entry, index) in history\" :key=\"index\">\n            <td>{{ entry.date }}</td>\n            <td>{{ entry.code }}</td>\n            <td>{{ entry.gain }}</td>\n            <td>{{ entry.expiryDate }}</td>\n            <td>{{ entry.username }}</td>\n            <td>\n              <!-- Afficher le bouton ou le texte en fonction du statut -->\n              <button v-if=\"entry.status === 'À remettre'\" @click=\"updateStatus(entry.id)\">\n                À remettre\n              </button>\n              <span v-else>\n                Remis le {{ entry.statusDate }}\n              </span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: \"AdminDashboard\",\n  data() {\n    return {\n      code: '', // Code saisi par l'utilisateur\n      history: [], // Historique des gains\n      alertMessage: '', // Message d'alerte\n      alertClass: '' // Classe CSS pour l'alerte\n    };\n  },\n  methods: {\n    async validateCode() {\n      try {\n        const response = await axios.post('http://localhost:3000/validate-code', { code: this.code });\n        if (response.status === 200 && response.data.message === 'Code valide !') {\n          this.alertMessage = 'Code valide !';\n          this.alertClass = 'alert-success';\n\n          // Ajouter l'entrée à l'historique\n          const newEntry = {\n            date: new Date().toLocaleDateString(), // Format de la date\n            code: this.code,\n            gain: response.data.gain,\n            expiryDate: new Date(new Date().setDate(new Date().getDate() + 30)).toLocaleDateString(), // Format de la date\n            username: localStorage.getItem('username') || 'N/A', // Ajoutez le username lors de la validation du code\n            status: 'À remettre', // État par défaut\n            statusDate: '' // Date du statut par défaut\n          };\n          this.history.push(newEntry);\n        } else {\n          this.alertMessage = 'Code invalide.';\n          this.alertClass = 'alert-error';\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          this.alertMessage = 'Code invalide.';\n        } else {\n          console.error('Erreur lors de la validation du code: ', error);\n          this.alertMessage = 'Erreur lors de la validation du code.';\n        }\n        this.alertClass = 'alert-error';\n      }\n    },\n    async fetchHistory() {\n      try {\n        const response = await axios.get('http://localhost:3000/admin-history');\n        this.history = response.data.map(entry => ({\n          date: new Date(entry.date).toLocaleDateString(), // Format de la date\n          code: entry.code,\n          gain: entry.gain,\n          expiryDate: new Date(entry.expiryDate).toLocaleDateString(), // Format de la date\n          username: entry.username || 'N/A', // Assurez-vous que le nom d'utilisateur est inclus\n          status: entry.status || 'À remettre', // Assurez-vous que le statut est inclus\n          statusDate: entry.statusDate ? new Date(entry.statusDate).toLocaleDateString() : '' // Format de la date du statut\n        }));\n      } catch (error) {\n        console.error('Erreur lors de la récupération de l\\'historique: ', error);\n      }\n    },\n    async updateStatus(id) {\n      try {\n        const response = await axios.patch(`http://localhost:3000/update-status/${id}`);\n        if (response.status === 200) {\n          // Mettre à jour l'entrée dans l'historique\n          const updatedHistory = this.history.map(entry => {\n            if (entry.id === id) {\n              entry.status = `Remis le ${new Date().toLocaleDateString()}`;\n              entry.statusDate = new Date().toLocaleDateString();\n            }\n            return entry;\n          });\n          this.history = updatedHistory;\n        }\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour du statut: ', error);\n      }\n    }\n  },\n  created() {\n    this.fetchHistory();\n  }\n};\n</script>\n\n\n\n<style scoped>\n/* Styles pour les alertes */\n.alert-success {\n  color: green;\n}\n\n.alert-error {\n  color: red;\n}\n\n.admin-dashboard {\n  padding: 20px;\n}\n\n.section-greeting {\n  margin-bottom: 40px;\n}\n\n.section-greeting h1 {\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: left; /* Alignement à gauche */\n}\n\n.code-form {\n  display: flex;\n  align-items: center;\n}\n\n.code-form input {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin-right: 20px; /* Espace entre l'input et le bouton */\n}\n\n.code-form button {\n  padding: 10px 30px; /* Augmenter la largeur du bouton */\n  background-color: #678d72; /* Nouvelle couleur de fond */\n  color: white;\n  border: none;\n  border-radius: 5px; /* Bordure arrondie du bouton */\n  cursor: pointer;\n}\n\n.section-history {\n  margin-top: 40px;\n}\n\n.section-history h2 {\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: left; /* Alignement à gauche */\n}\n\n.history-table-wrapper {\n  overflow: hidden; /* Assure que les bordures arrondies ne débordent pas */\n}\n\n.history-table {\n  width: 100%;\n  border-collapse: separate; /* Permet de voir l'espace entre les lignes */\n  border-spacing: 0 10px; /* Espace entre les lignes pour voir la background color */\n  background-color: #f3ede0;\n  border: 2px solid #000; /* Bordure extérieure */\n  border-radius: 15px; /* Bordure arrondie pour l'ensemble du tableau */\n  padding: 10px; /* Padding pour éviter que les lignes touchent les bords */\n  box-sizing: border-box; /* S'assure que le padding est inclus dans la largeur */\n}\n\n.history-table th {\n  padding: 15px;\n  text-align: left;\n  color: black;\n  background-color: #f3ede0; /* Même couleur que le fond de la table */\n}\n\n.history-table td {\n  padding: 15px;\n  text-align: left;\n  background-color: #a3bfab; /* Couleur des lignes */\n  color: white;\n  border: none; /* Supprimer la bordure entre les cellules */\n}\n\n/* Bordure arrondie pour chaque ligne */\n.history-table tr {\n  border-radius: 50px;\n  overflow: hidden; /* Assure que les coins arrondis sont visibles */\n}\n\n.history-table tr:not(:last-child) {\n  margin-bottom: 10px; /* Espace entre les lignes */\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAiB;;EAEjBA,KAAK,EAAC;AAAkB;gEAC/BC,mBAAA,CAAwC,YAApC,iCAA+B;gEAGjCA,mBAAA,CAAsC;EAA9BC,IAAI,EAAC;AAAQ,GAAC,SAAO;;EAMxBF,KAAK,EAAC;AAAiB;gEAC9BC,mBAAA,CAA6B,YAAzB,sBAAoB;;EACjBD,KAAK,EAAC;AAAe;gEAC1BC,mBAAA,CASQ,gB,aARNA,mBAAA,CAOK,a,aANHA,mBAAA,CAA2B,YAAvB,oBAAkB,G,aACtBA,mBAAA,CAAsB,YAAlB,eAAa,G,aACjBA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAA+B,YAA3B,wBAAsB,G,aAC1BA,mBAAA,CAA6B,YAAzB,sBAAoB,G,aACxBA,mBAAA,CAAe,YAAX,QAAM,G,aAAME,mBAAA,qCAAwC,C;mBAvBpE;;EAAAC,GAAA;AAAA;;uBACEC,mBAAA,CA6CM,OA7CNC,UA6CM,GA5CJH,mBAAA,eAAkB,EAClBF,mBAAA,CAOU,WAPVM,UAOU,GANRC,UAAwC,EACxCP,mBAAA,CAGO;IAHDD,KAAK,EAAC,WAAW;IAAES,QAAM,EAAAC,MAAA,QAAAA,MAAA,MALrCC,cAAA,KAAAC,IAAA,KAK+CC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;sBACnDX,mBAAA,CAA0E;IAAnEC,IAAI,EAAC,MAAM;IAN1B,uBAAAQ,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAMoCC,KAAA,CAAAC,IAAI,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAlBF,KAAA,CAAAC,IAAI,E,GAChCE,UAAsC,C,4BAE/BH,KAAA,CAAAI,YAAY,I,cAArBf,mBAAA,CAAiE;IATvED,GAAA;IAS8BJ,KAAK,EATnCqB,eAAA,CASqCL,KAAA,CAAAM,UAAU;sBAAKN,KAAA,CAAAI,YAAY,2BAThEjB,mBAAA,e,GAYIA,mBAAA,eAAkB,EAClBF,mBAAA,CAgCU,WAhCVsB,UAgCU,GA/BRC,UAA6B,EAC7BvB,mBAAA,CA6BQ,SA7BRwB,UA6BQ,GA5BNC,UASQ,EACRzB,mBAAA,CAiBQ,iB,kBAhBNI,mBAAA,CAeKsB,SAAA,QA1CfC,WAAA,CA2BuCZ,KAAA,CAAAa,OAAO,EA3B9C,CA2BsBC,KAAK,EAAEC,KAAK;yBAAxB1B,mBAAA,CAeK;MAfkCD,GAAG,EAAE2B;IAAK,IAC/C9B,mBAAA,CAAyB,YAAA+B,gBAAA,CAAlBF,KAAK,CAACG,IAAI,kBACjBhC,mBAAA,CAAyB,YAAA+B,gBAAA,CAAlBF,KAAK,CAACb,IAAI,kBACjBhB,mBAAA,CAAyB,YAAA+B,gBAAA,CAAlBF,KAAK,CAACI,IAAI,kBACjBjC,mBAAA,CAA+B,YAAA+B,gBAAA,CAAxBF,KAAK,CAACK,UAAU,kBACvBlC,mBAAA,CAA6B,YAAA+B,gBAAA,CAAtBF,KAAK,CAACM,QAAQ,kBACrBnC,mBAAA,CAQK,aAPHE,mBAAA,0DAA6D,EAC/C2B,KAAK,CAACO,MAAM,qB,cAA1BhC,mBAAA,CAES;MArCvBD,GAAA;MAmC4DkC,OAAK,EAAAvB,MAAA,IAAEF,QAAA,CAAA0B,YAAY,CAACT,KAAK,CAACU,EAAE;OAAG,cAE7E,iBArCdC,UAAA,M,cAsCcpC,mBAAA,CAEO,QAxCrBqC,WAAA,EAsC2B,YACF,GAAAV,gBAAA,CAAGF,KAAK,CAACa,UAAU,kB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}